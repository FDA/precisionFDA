#!/usr/bin/env python

"""

To upload a file:

  pfda [--auth <KEY>] upload-file [--threads THREADS] /path/to/file


To upload an asset:

  pfda [--auth <KEY>] upload-asset [--threads THREADS] --name NAME --root /path/ --readme README


"""
from __future__ import print_function, unicode_literals, division

import logging
logging.basicConfig(level=logging.INFO)

import os, sys, collections, atexit, errno, signal
import json
import argparse
import subprocess
import hashlib
import traceback

if sys.version_info < (2, 7):
    exit("The precisionFDA asset/file uploader requires Python >= 2.7")
try:
    import requests
except ImportError as ie:
    exit("The precisionFDA asset/file uploader requires the Python module 'requests'." +
         " Please install it using the command 'pip install --user requests'.")
try:
    import concurrent.futures
except ImportError as ie:
    exit("The precisionFDA asset/file uploader requires the Python module 'futures'." +
         " Please install it using the command 'pip install --user futures'.")

from requests.adapters import HTTPAdapter
from requests.packages import urllib3
from requests.utils import default_user_agent
from requests.packages.urllib3.util import Retry

try:
    urllib3.disable_warnings(category=urllib3.exceptions.InsecurePlatformWarning)
except Exception as ue:
    pass

logging.getLogger('requests.packages.urllib3.connectionpool').setLevel(logging.ERROR)
logger = logging.getLogger(__name__)
logger.addHandler(logging.NullHandler())

__version__ = "1.0.6"
MAX_THREADS = 6
THREAD_POOL_FUTURES = set()
MAX_RETRY = 10
CHUNK_SIZE = 64*1024*1024

TYPE_UPLOAD_ASSET, TYPE_UPLOAD_FILE, TYPE_DOWNLOAD_APP_SPEC, TYPE_DOWNLOAD_APP_SCRIPT = range(4)

print("\nprecisionFDA asset/file uploader -- v{}".format(__version__) + "\n")

class Config(collections.MutableMapping):
    """
    Provides a self-contained (no dependencies outside the standard library), Python 2 and 3 compatible configuration
    manager. Automatically saves and restores your application's configuration in your user home directory. Uses JSON
    for serialization. Supports dict-like methods and access semantics.
    Examples:
        config = Config()
        config.host, config.port = "example.com", 9000
        config.nested_config = {}
        config.nested_config.foo = True
    After restarting your application:
        config = Config()
        print(config)
        >>> {'host': 'example.com', 'port': 9000, 'nested_config': {'foo': True}}
    """
    _config_home = os.environ.get("XDG_CONFIG_HOME", os.path.expanduser("~/.config"))

    def __init__(self, name=os.path.basename(__file__), save_on_exit=True, autosave=False, _parent=None, _data=None):
        """
        :param name:
            Name of the application that this config belongs to. This will be used as the name of the config directory.
        :param save_on_exit: If True, save() will be called at Python interpreter exit (using an atexit handler).
        :param autosave: If True, save() will be called after each attribute assignment.
        """
        self._config_dir = os.path.join(self._config_home, name)
        self._config_file = os.path.join(self._config_dir, "config.json")
        if save_on_exit:
            atexit.register(self.save)
        self._autosave = autosave
        self._parent = _parent
        if self._parent is None:
            try:
                with open(self._config_file) as fh:
                    self._data = json.load(fh, object_hook=self._as_config)
            except Exception as e:
                self._data = {}
        else:
            self._data = _data

    def _as_config(self, d):
        if isinstance(d, collections.MutableMapping):
            return Config(autosave=self._autosave, _parent=self, _data=d)
        return d

    def save(self, mode=0o600):
        """
        Serialize the config data to the user home directory as JSON.
        :param mode: The octal Unix mode (permissions) for the config file.
        """
        if self._parent is not None:
            self._parent.save(mode=mode)
        else:
            try:
                os.makedirs(self._config_dir)
            except OSError as e:
                if not (e.errno == errno.EEXIST and os.path.isdir(self._config_dir)):
                    raise
            with open(self._config_file, "wb" if sys.version_info < (3, 0) else "w") as fh:
                json.dump(self._data, fh, default=lambda obj: obj._data)
            os.chmod(self._config_file, mode)

    def __getitem__(self, item):
        if item not in self._data:
            raise KeyError(item)
        return self._data[item]

    def __setitem__(self, key, value):
        self._data[key] = self._as_config(value)
        if self._autosave:
            self.save()

    def __getattr__(self, attr):
        return self.__getitem__(attr)

    def __setattr__(self, attr, value):
        if attr.startswith("_"):
            self.__dict__[attr] = value
        else:
            self.__setitem__(attr, value)

    def __delitem__(self, key):
        del self._data[key]

    def __iter__(self):
        for item in self._data:
            yield item

    def __len__(self):
        return len(self._data)

    def __repr__(self):
        return repr(self._data)

def wait_for_a_future(futures, print_traceback=False):
    """
    Return the next future that completes.  If a KeyboardInterrupt is
    received, then the entire process is exited immediately.  See
    wait_for_all_futures for more notes.
    """
    while True:
        try:
            future = next(concurrent.futures.as_completed(futures, timeout=sys.maxint))
            break
        except concurrent.futures.TimeoutError:
            pass
        except KeyboardInterrupt:
            if print_traceback:
                traceback.print_stack()
            os._exit(os.EX_IOERR)

    return future

def get_futures_threadpool(max_workers):
    return concurrent.futures.ThreadPoolExecutor(max_workers=max_workers)

def wait_for_all_futures(futures, print_traceback=False):
    """
    Wait indefinitely for all futures in the input iterable to complete.
    Use a timeout to enable interrupt handling.
    Call os._exit() in case of KeyboardInterrupt. Otherwise, the atexit registered handler in concurrent.futures.thread
    will run, and issue blocking join() on all worker threads, requiring us to listen to events in worker threads
    in order to enable timely exit in response to Ctrl-C.
    Note: This still doesn't handle situations where Ctrl-C is pressed elsewhere in the code and there are worker
    threads with long-running tasks.
    Note: os._exit() doesn't work well with interactive mode (e.g. ipython). This may help:
    import __main__ as main; if hasattr(main, '__file__'): os._exit() else: os.exit()
    """
    try:
        while True:
            waited_futures = concurrent.futures.wait(futures, timeout=60)
            if len(waited_futures.not_done) == 0:
                break
    except KeyboardInterrupt:
        if print_traceback:
            traceback.print_stack()
        os._exit(os.EX_IOERR)

THREAD_POOL = get_futures_threadpool(MAX_THREADS)
IS_ASSET = False

# Request input from the user
# name, directory, description and auth key

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, usage=__doc__)

parser.add_argument("transfer_type", choices=['upload-file', 'upload-asset', 'download-app-spec', 'download-app-script'], action="store", help="Upload/Download type")

parser.add_argument("--auth", action="store", dest="auth_key", help="Authorization key")

parser.add_argument("--app-id", action="store", dest="app_id", help="App ID for downloading specs or scripts")

parser.add_argument("--output-file", action="store", dest="output_file", help="File for writing out app data")

parser.add_argument("--name", action="store", dest="asset_name",
                    help="Asset name (ending with .tar or .tar.gz)")

parser.add_argument("--readme", action="store", dest="asset_readme",
                    help="Readme file for the asset (ending with .txt or .md)")

parser.add_argument("--root", action="store", dest="asset_root", help="Root path to the asset")

parser.add_argument("--threads", help="Number of upload threads")

parser.add_argument("file_path", nargs='?', default="", help="Path to file")


args = parser.parse_args()
if args.threads:
    MAX_THREADS = args.threads

if args.transfer_type == "upload-asset":
    TRANSFER_TYPE = TYPE_UPLOAD_ASSET
elif args.transfer_type == "upload-file":
    TRANSFER_TYPE = TYPE_UPLOAD_FILE
elif args.transfer_type == "download-app-spec":
    TRANSFER_TYPE = TYPE_DOWNLOAD_APP_SPEC
elif args.transfer_type == "download-app-script":
    TRANSFER_TYPE = TYPE_DOWNLOAD_APP_SCRIPT
else:
    exit("The transfer-type positional argument requires one of ['upload-file', 'upload-asset', 'download-app-spec', 'download-app-spec'].")

if TRANSFER_TYPE == TYPE_UPLOAD_ASSET:
    if args.asset_name:
        if not args.asset_name.endswith((".tar", ".tar.gz")):
            exit('The asset name "{}" should end with .tar or .tar.gz.'.format(args.asset_name))
    else:
        exit('Asset name (ending with .tar or .tar.gz) is required. Provide it as [--name ASSET_NAME].')
    if args.asset_readme:
        if not args.asset_readme.endswith((".txt", ".md")):
            exit('The asset readme file "{}" should end with .txt or .md.'.format(args.asset_readme))
        if not os.path.isfile(args.asset_readme):
            exit('Asset readme file "{}" does not exist.'.format(args.asset_readme) +
                 " Provide path to a readme file that exists on your system.")
    else:
        exit("Readme file for the asset (ending with .txt or .md) is required. Provide it as [--readme ASSET_README].")
    if args.asset_root:
        if not os.path.exists(args.asset_root):
            exit('The root directory "{}" does not exist.'.format(args.asset_root) + ". Provide a valid directory path.")
    else:
        exit("Root directory for the asset is required. Provide it as [--root ASSET_ROOT].")
elif TRANSFER_TYPE == TYPE_UPLOAD_FILE:
    # check that there is another argument
    if len(args.file_path) == 0 or args.file_path == "":
        exit("File path for the file is required")
    else:
        if not os.path.isfile(args.file_path):
            exit('File "{}" does not exist'.format(args.file_path) + ". Provide path to a file that exists on your system.")

# check if auth_key is None, read the key from user's config.json file
config = Config(name="precision-fda")
if args.auth_key:
    config.key = "key"
    config.value = args.auth_key
elif "key" not in config:
    config.key = "key"
    config.value = ""
    exit("A precisionFDA authorization key is required. Please supply one with --auth when first running this utility.")

USER_AGENT = "{name}/{version} ({platform}) {requests_version}".format(name="Asset and File Uploader",
                                                                       version=__version__,
                                                                       platform="precisionFDA",
                                                                       requests_version=default_user_agent())
AUTH_HEADER = {"User-Agent": USER_AGENT, "Authorization": "Key %s" % (config.value)}

https_retry = Retry(total=MAX_RETRY, backoff_factor=5)

# define a method to get the url for the asset/file storage and then submit it
def send_tostore(asset_id, data_len, data_index, data_bytes):
    # get md5sum of the chunk
    md = hashlib.md5()
    md.update(data_bytes)
    chunk_md5 = md.hexdigest()

    UPLOAD_URL = "https://precision.fda.gov/api/get_upload_url"
    PUT_URL = "https://s3.amazonaws.com"

    upload_session = requests.Session()
    upload_session.mount(UPLOAD_URL, HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=https_retry))
    upload_session.mount(PUT_URL, HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=https_retry))

    # call the precisionFDA api
    # build up the data JSON to be sent to get_upload_url()
    get_url_data = {"id": asset_id, "size": data_len, "index": data_index, "md5": chunk_md5}
    try:
        get_url_res = upload_session.post(UPLOAD_URL, json=get_url_data, headers=AUTH_HEADER, timeout=120)
    except requests.exceptions.RequestException as e:
        logger.error("\nFailed to get upload url for chunk #" + str(data_index) +
                     ". Please try again later; if the problem persists, contact precisionFDA support.\n")
        logger.error(e)
        os._exit(os.EX_IOERR)
    get_url_res.raise_for_status()
    url_res_recv = get_url_res.json()
    storage_url = url_res_recv['url']
    try:
        storage_res = upload_session.put(storage_url, headers=url_res_recv["headers"], data=data_bytes, timeout=120)
    except requests.exceptions.RequestException as e:
        logger.error("\nFailed to upload chunk #" + str(data_index) +
                     ". Please try again later; if the problem persists, contact precisionFDA support.\n")
        logger.error(e)
        os._exit(os.EX_IOERR)
    storage_res.raise_for_status()

# function to download an app's spec
def download_app_info(app_id, app_info_path, output_file):
    # Define URLS
    CREATE_URL = "https://precision.fda.gov/api/" + app_info_path
    CLOSE_URL = "https://precision.fda.gov/api/" + app_info_path

    # setup HTTP request retry options
    session = requests.Session()
    session.mount(CREATE_URL, HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=MAX_RETRY))
    session.mount(CLOSE_URL, HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=MAX_RETRY))

    print("Downloading app data...")
    data = {"id": app_id}
    # if there is an exception show a message and exit
    try:
        res = session.post(CREATE_URL, json=data, headers=AUTH_HEADER)
    except requests.exceptions.RequestException as re:
        logger.error("Invalid server response during download. Please try again later; if the problem " +\
                             "persists, contact precisionFDA support.")
        logger.error(re)
        exit(1)

    try:
        res.raise_for_status()
    except requests.exceptions.HTTPError as he:
        if res.status_code == 401:
            logger.error(he.message)
            logger.error("The provided authorization key has expired. Please obtain a new authorization key and try again later.")
            exit(1)
        else:
            raise

    if output_file and output_file != '-':
        f = open(output_file, 'w')
    else:
        f = sys.stdout
    try:
        if app_info_path == "get_app_spec":
            json.dump(res.json(), f)
        else:
            f.write(res.text)
    finally:
        if f is not sys.stdout:
            f.close()

# function to upload the asset
def upload_asset(asset_name, asset_directory, asset_readme):
    with open(asset_readme) as rm:
        asset_desc = rm.read()

    # Define URLS
    CREATE_URL = "https://precision.fda.gov/api/create_asset"
    CLOSE_URL = "https://precision.fda.gov/api/close_asset"

    # read the directory and get the entries for the files existing in all its sub-directories
    file_list = []
    cut_len = len(asset_directory)
    no_files = True
    for dirname, dirnames, filenames in os.walk(asset_directory):
        this_dir = dirname[cut_len:]
        if this_dir != '':
            file_list.append(this_dir + "/")
        for filename in filenames:
            ap = os.path.join(dirname, filename)[cut_len:]
            file_list.append(ap)
            no_files = False

    if no_files:
        exit('The root directory "{}" does not contain any files.'.format(asset_directory))

    # setup HTTP request retry options
    asset_session = requests.Session()
    asset_session.mount(CREATE_URL, HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=https_retry))
    asset_session.mount(CLOSE_URL, HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=https_retry))

    print("Creating asset...")
    data = {"name": asset_name, "description": asset_desc, "paths": file_list}
    res = asset_session.post(CREATE_URL, json=data, headers=AUTH_HEADER)
    # if there is an exception show a message and exit
    try:
        res.raise_for_status()
    except requests.exceptions.HTTPError as he:
        if res.status_code == 401:
            logger.error(he.message)
            logger.error("The provided authorization key has expired. Please obtain a new authorization key and try again later.")
            exit(1)
        else:
            raise
    res_received = res.json()
    # if asset id not returned in the server response
    if not "id" in res_received:
        logger.error("Invalid server response during asset creation. Please try again later; if the problem " + \
                     "persists, contact precisionFDA support.")
        exit(1)
    file_id = res_received['id']

    tar_opts = ["tar", "-c"]
    if asset_name.endswith(".gz"):
        tar_opts.append("-z")
    tar_opts.extend(["-C", asset_directory, "."])

    uploaded = 0
    tar_child = subprocess.Popen(tar_opts, stdout=subprocess.PIPE)
    chunk_index = 1

    print("Uploading...")
    try:
        while True:
            chunk = tar_child.stdout.read(CHUNK_SIZE)
            if len(chunk) == 0:
                break
            while len(THREAD_POOL_FUTURES) >= MAX_THREADS:
                free_future = wait_for_a_future(THREAD_POOL_FUTURES)
                if free_future.exception():
                    logger.error(free_future.exception())
                    logger.error("A thread failed to complete successfully.")
                    os._exit(os.EX_IOERR)
                THREAD_POOL_FUTURES.remove(free_future)
            uploaded = uploaded + len(chunk)
            future = THREAD_POOL.submit(send_tostore, file_id, len(chunk), chunk_index, chunk)
            THREAD_POOL_FUTURES.add(future)
            sys.stdout.write("\r[ " + format(uploaded, ",") + " compressed bytes processed ]")
            sys.stdout.flush()

            chunk_index = chunk_index + 1
    except KeyboardInterrupt:
        os._exit(os.EX_IOERR)

    # Check if exception
    for f in THREAD_POOL_FUTURES:
        if f.exception():
            os.kill(os.getpid(), signal.SIGTERM)
    tar_child.stdout.close()
    wait_for_all_futures(THREAD_POOL_FUTURES)
    print("\n[ 100 % upload complete ]")
    #close the asset
    if file_id:
        try:
            close_res = asset_session.post(CLOSE_URL, json={"id": file_id}, headers=AUTH_HEADER, timeout=120)
        except requests.exceptions.RequestException as e:
            logger.error("Asset finalization failed. Please try again later; if the problem persists, " + \
                         "contact precisionFDA support.")
            logger.error(e)
            exit(1)
        close_res.raise_for_status()
    print("\nDone. You can access the asset at https://precision.fda.gov/app_assets/" + file_id)

def upload_file(file_path):
    # Define URLS
    CREATE_URL = "https://precision.fda.gov/api/create_file"
    CLOSE_URL = "https://precision.fda.gov/api/close_file"

    # Get the file name from the path
    if '/' in file_path:
        file_name = file_path[file_path.rindex('/')+1:]
    else:
        file_name = file_path
    description = ""

    # setup HTTP request retry options
    file_session = requests.Session()
    file_session.mount(CREATE_URL, HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=https_retry))
    file_session.mount(CLOSE_URL, HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=https_retry))

    data = {"name": file_name, "description": description}

    # if there is an exception show a message and exit
    print("Creating file entry...")
    try:
        res = file_session.post(CREATE_URL, json=data, headers=AUTH_HEADER)
    except requests.exceptions.RequestException as re:
        logger.error("Invalid server response during file creation. Please try again later; if the problem " +\
                             "persists, contact precisionFDA support.")
        logger.error(re)
        exit(1)

    try:
        res.raise_for_status()
    except requests.exceptions.HTTPError as he:
        if res.status_code == 401:
            logger.error(he.message)
            logger.error("The provided authorization key has expired. Please obtain a new authorization key and try again later.")
            exit(1)
        else:
            raise
    res_received = res.json()
    # if file id not returned in the server response
    if not "id" in res_received:
        logger.error("Invalid server response during file creation. Please try again later; if the problem " + \
                             "persists, contact precisionFDA support.")
        exit(1)
    file_id = res_received['id']

    print("Uploading...")

    fda = open(file_path, 'rb')
    # get the total size of the file
    total_size = int(os.stat(file_path).st_size)
    chunk_index = 1
    uploaded = 0
    try:
        while True:
            chunk = fda.read(CHUNK_SIZE)
            if len(chunk) == 0:
                break
            while len(THREAD_POOL_FUTURES) >= MAX_THREADS:
                free_future = wait_for_a_future(THREAD_POOL_FUTURES)
                if free_future.exception():
                    logger.error(free_future.exception())
                    logger.error("A thread failed to complete successfully.")
                    os._exit(os.EX_IOERR)
                THREAD_POOL_FUTURES.remove(free_future)
            uploaded = uploaded + len(chunk)
            size_per = "%d" %((uploaded / total_size) * 100)
            future = THREAD_POOL.submit(send_tostore, file_id, len(chunk), chunk_index, chunk)
            THREAD_POOL_FUTURES.add(future)
            sys.stdout.write("\r[ " + size_per + " % read ]")
            sys.stdout.flush()

            chunk_index = chunk_index + 1
    except KeyboardInterrupt:
        os._exit(os.EX_IOERR)
    # Check if exception in the futures
    for f in THREAD_POOL_FUTURES:
        if f.exception():
            os.kill(os.getpid(), signal.SIGTERM)
    fda.close()
    wait_for_all_futures(THREAD_POOL_FUTURES)

    print("\n[ 100 % upload complete ]")
    #close the file
    if file_id:
        try:
            close_res = file_session.post(CLOSE_URL, json={"id": file_id}, headers=AUTH_HEADER, timeout=120)
        except requests.exceptions.RequestException as re:
            logger.error("File finalization failed. Please try again later; if the problem persists, " +
                         "contact precisionFDA support.")
            logger.error(re)
            exit(1)
        close_res.raise_for_status()
    print("\nDone. You can access the file at https://precision.fda.gov/files/" + file_id)

if TRANSFER_TYPE == TYPE_UPLOAD_ASSET:
    upload_asset(args.asset_name, args.asset_root, args.asset_readme)
elif TRANSFER_TYPE == TYPE_UPLOAD_FILE:
    upload_file(args.file_path)
elif TRANSFER_TYPE == TYPE_DOWNLOAD_APP_SPEC:
    download_app_info(args.app_id, "get_app_spec", args.output_file)
elif TRANSFER_TYPE == TYPE_DOWNLOAD_APP_SCRIPT:
    download_app_info(args.app_id, "get_app_script", args.output_file)
else:
    # Shouldn't reach here
    exit()
