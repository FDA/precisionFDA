#!/usr/bin/env python

import json
import argparse
import os
import errno
import subprocess

from distutils.util import strtobool

# Replicate 'mkdir -p'
def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

# Replicate 'ln -sf'
def ln_sf(src, dest):
    try:
        os.symlink(src, dest)
    except OSError as exc:
        if exc.errno == errno.EEXIST:
            os.remove(dest)
            os.symlink(src, dest)
        else:
            raise

# Load app spec JSON file
APP_SPEC_PATH = "/spec.json"
# input file path
LOCAL_FILE_PATH = "/work/in/"

spec_exists = os.path.isfile(APP_SPEC_PATH)
if not spec_exists:
    exit('No app specification file found!')
try:
    app_spec_fh = open(APP_SPEC_PATH)
    try:
        app_spec = json.load(app_spec_fh)
    except:
        exit('Error loading app spec from file: {}'.format(sys.exc_info()[0]))
    finally:
        app_spec_fh.close()
except (IOError, OSError) as e:
    exit('Error opening app spec file ({}): {}'.format(e.errno, e.strerror))

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, usage=__doc__)

# Add arguments according to input spec
inputs = app_spec['spec']['input_spec']
for item in inputs:
    arg_val = '--' + item['name']
    choices_val = map(str, item['choices']) if 'choices' in item else None
    default_val = str(item['default']) if 'default' in item else None
    # Special case: if has default then required doesn't matter
    required_val = False if default_val else not item['optional']
    # If required==True and not provided, will error regardless of default
    # Store all args as strings, then type check later
    parser.add_argument(arg_val, type=str, choices=choices_val, dest=item['name'], action="store", help=item['help'], required=required_val, default=default_val)

args = parser.parse_args()

# Check and sanitize input arguments
for item in inputs:
    input_val = getattr(args, item['name'])

    # if the value is None, store empty string
    if input_val == None:
        setattr(args, item['name'], "")
        continue

    # strings are string
    if item['class'] == 'string':
        continue
    elif item['class'] == 'file':
        if not os.path.isabs(input_val):
            exit('input file argument "{}" needs to be an absolute path!'.format(input_val))
        elif not os.path.isfile(input_val):
            exit('input file argument "{}" does not exist or is a directory!'.format(input_val))
        link_dir = os.path.join(LOCAL_FILE_PATH, item['name'])
        # create "LOCAL_FILE_PATH/$input_file_name"
        mkdir_p(link_dir)
        # symlink user file to "LOCAL_FILE_PATH/$input_file_name"
        ln_sf(input_val, os.path.join(link_dir, os.path.basename(input_val)))
    elif item['class'] == 'int':
        try:
            int(input_val)
        except ValueError:
            exit('input integer argument "{}" is not a valid integer!'.format(input_val))
    elif item['class'] == 'float':
        try:
            float(input_val)
        except ValueError:
            exit('input float argument "{}" is not a valid float!'.format(input_val))
    elif item['class'] == 'boolean':
        try:
            input_bool = bool(strtobool(input_val.lower()))
        except ValueError:
            exit('input boolean argument "{}" is not one of [y/n, yes/no, t/f, true/false, on/off, 1/0]!'.format(input_val))
        # Write lowercase bool to args since bash uses lowercase
        setattr(args, item['name'], str(input_bool).lower())
    else:
        exit('Unsupported class "{}" for argument "{}"!'.format(item['class'],item['name']))

# Prepare app environment
for item in inputs:
    # All values in args should be strings
    input_val = getattr(args, item['name'])
    os.environ[item['name']] = input_val

    if item['class'] == 'file':
        # Set environmental variables
        os.environ[item['name'] + '_name'] = os.path.basename(input_val)
        os.environ[item['name'] + '_path'] = os.path.join(LOCAL_FILE_PATH, item['name'], os.path.basename(input_val))
        # "." and "" cases covered by input checks
        # NOTE: os.path.splittext(".foo") returns ['.foo', '']
        [head, tail] = os.path.splitext(os.path.basename(input_val))
        if tail == '.gz':
            head = os.path.splitext(head)[0]
        os.environ[item['name'] + '_prefix'] = head

# Call app script
subprocess.check_call(["/bin/bash", "-e", "-x", "-o", "pipefail", "/script.sh"], stderr=subprocess.STDOUT)
